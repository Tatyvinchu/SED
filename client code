#include <WiFi.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"
#include "AdafruitIO_WiFi.h"

// WiFi & Adafruit IO Configuration
#define WIFI_SSID "Hemang-5G"
#define WIFI_PASS "kaustubh1308"
#define AIO_USERNAME "SED_Project"
#define AIO_KEY "aio_uWHU48kiRhuU2z2sZtZ6osIr9NeW"

// Define ESP32 ID
#define CLIENT_ID "Floor_1_esp"

// Define Button Pins
#define FIRE_BUTTON 2
#define MEDICAL_BUTTON 4
#define SECURITY_BUTTON 5
#define OTHER_BUTTON 18

// Define Output Pins
#define LED_PIN 19
#define BUZZER_PIN 21

// WiFi Client & MQTT Setup
WiFiClient client;
Adafruit_MQTT_Client mqtt(&client, "io.adafruit.com", 1883, AIO_USERNAME, AIO_KEY);

// Adafruit IO Feeds for Sending Alerts
Adafruit_MQTT_Publish fireAlert = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/fire_alert");
Adafruit_MQTT_Publish medicalAlert = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/medical_alert");
Adafruit_MQTT_Publish securityAlert = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/security_alert");
Adafruit_MQTT_Publish otherAlert = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/other_alert");

// Adafruit IO Feeds for Receiving Alerts
Adafruit_MQTT_Subscribe fireAlertSub = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/fire_alert");
Adafruit_MQTT_Subscribe medicalAlertSub = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/medical_alert");
Adafruit_MQTT_Subscribe securityAlertSub = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/security_alert");
Adafruit_MQTT_Subscribe otherAlertSub = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/other_alert");

void setup() {
    Serial.begin(115200);
    
    pinMode(FIRE_BUTTON, INPUT_PULLUP);
    pinMode(MEDICAL_BUTTON, INPUT_PULLUP);
    pinMode(SECURITY_BUTTON, INPUT_PULLUP);
    pinMode(OTHER_BUTTON, INPUT_PULLUP);
    
    pinMode(LED_PIN, OUTPUT);
    pinMode(BUZZER_PIN, OUTPUT);
    
    connectToWiFi();
    connectToMQTT();

    // Subscribe to alert feeds
    mqtt.subscribe(&fireAlertSub);
    mqtt.subscribe(&medicalAlertSub);
    mqtt.subscribe(&securityAlertSub);
    mqtt.subscribe(&otherAlertSub);
}

void loop() {
    mqtt.processPackets(10000);
    
    // Check button presses and send alerts
    if (digitalRead(FIRE_BUTTON) == LOW) {
        sendEmergencyAlert("Fire", &fireAlert);
    } else if (digitalRead(MEDICAL_BUTTON) == LOW) {
        sendEmergencyAlert("Medical", &medicalAlert);
    } else if (digitalRead(SECURITY_BUTTON) == LOW) {
        sendEmergencyAlert("Security", &securityAlert);
    } else if (digitalRead(OTHER_BUTTON) == LOW) {
        sendEmergencyAlert("Other", &otherAlert);
    }

    // Check for received messages
    while (Adafruit_MQTT_Subscribe *subscription = mqtt.readSubscription(1000)) {
        if (subscription == &fireAlertSub || subscription == &medicalAlertSub || 
            subscription == &securityAlertSub || subscription == &otherAlertSub) {
            triggerEmergencyResponse();
        }
    }
}

// Function to send alerts
void sendEmergencyAlert(String alertType, Adafruit_MQTT_Publish *alertFeed) {
    Serial.println(alertType + " Alert Sent!");
    alertFeed->publish(1);
    delay(10000); // Keep alert active for 10 seconds
    alertFeed->publish(0);
}

// Function to handle received alerts
void triggerEmergencyResponse() {
    Serial.println("Emergency Alert Received! Activating buzzer and LED.");
    for (int i = 0; i < 5; i++) {
        digitalWrite(LED_PIN, HIGH);
        digitalWrite(BUZZER_PIN, HIGH);
        delay(500);
        digitalWrite(LED_PIN, LOW);
        digitalWrite(BUZZER_PIN, LOW);
        delay(500);
    }
}

// Function to connect to WiFi
void connectToWiFi() {
    WiFi.begin(WIFI_SSID, WIFI_PASS);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi!");
}

// Function to connect to Adafruit MQTT
void connectToMQTT() {
    while (mqtt.connect() != 0) {
        Serial.println("Connecting to MQTT...");
        delay(5000);
    }
    Serial.println("Connected to MQTT!");
}
