#include <WiFi.h>
#include <WebServer.h>
#include <vector>

// Network credentials
const char* ssid = "Abhi";
const char* password = "12345678";

// Server object
WebServer server(80);

// List of connected clients
std::vector<String> clientIPs;

// Server LED pin
const int serverLED = 2;

// Function to handle emergency alerts
void handleEmergency() {
    String clientID = server.arg("client");
    String emergencyType = server.arg("type");

    // Log the emergency
    Serial.println("Emergency received!");
    Serial.println("Client: " + clientID + ", Type: " + emergencyType);

    // Blink the server LED
    digitalWrite(serverLED, HIGH);
    delay(500);
    digitalWrite(serverLED, LOW);

    // Broadcast alert to all connected clients
    for (const String& clientIP : clientIPs) {
        WiFiClient client;
        if (client.connect(clientIP.c_str(), 80)) {
            String alertMessage = "GET /alert HTTP/1.1\r\nHost: " + clientIP + "\r\nConnection: close\r\n\r\n";
            client.print(alertMessage);
            client.stop();
            Serial.println("Alert sent to client: " + clientIP);
        } else {
            Serial.println("Failed to send alert to client: " + clientIP);
        }
    }

    // Respond to the emergency sender
    server.send(200, "text/plain", "Emergency alert broadcasted to all clients!");
}

// Function to handle heartbeat registration
void handleHeartbeat() {
    String clientIP = server.client().remoteIP().toString();
    if (std::find(clientIPs.begin(), clientIPs.end(), clientIP) == clientIPs.end()) {
        clientIPs.push_back(clientIP);
        Serial.println("Client registered: " + clientIP);
    }
    server.send(200, "text/plain", "Heartbeat received!");
}

void setup() {
    Serial.begin(115200);

    // Initialize the server LED
    pinMode(serverLED, OUTPUT);
    digitalWrite(serverLED, LOW);

    // Connect to Wi-Fi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");
    Serial.print("Server IP Address: ");
    Serial.println(WiFi.localIP());

    // Define server routes
    server.on("/emergency", handleEmergency);
    server.on("/heartbeat", handleHeartbeat);

    // Start the server
    server.begin();
    Serial.println("Server started");
}

void loop() {
    server.handleClient();
}
